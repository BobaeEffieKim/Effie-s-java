package practice_0708_abstract;

public class Explanation {
/*
 * [추상클래스]
 * 
 * -추상 : 실체들 간에 공통되는 특성을 추출한 것
 * 	-> 예) 새,곤충,물고기 => 동물(추상)
 * 	-> 예) 삼성,현대,엘쥐 => 회사(추상)
 * 
 * -추상클래스 (abstract class)
 * 	->실체 클래스들의 공통되는 필드와 메소드를 별도로 정의한 클래스를 말한다 (실체클래스:객체를 만들어사용할 수 있는 클래스)
 * 	->(중요) 추상 클래스는 실체 클래스의 부모클래스 역할을 할 수 있다.
 * 		=> 실체의 공통적인 특성을 가진 어떤 클래스에서 그 특성을 자식들이 물려받는것이
 *  		비슷한 개념으로 일종의 상속의 개념이 될 수있다.
 * 	-> 추상 클래스는 단독으로 객체를 생성할 수 없고, 부모 클래스로만 사용된다.
 * 		=> 추상클래스는 실체들의 공통된 부분만을 정의한것이라 실체 객체를 만들지는 못한다
 * 		=> new연산자로 객체를 생성할 수 없다는 말
 * 		=> 실체 클래스들의 부모 역할을 함
 * 		ex. Animal animal = new Animal();   //불가
 * 		ex. class Ant extends Animal{}		//가능
 * 			-> 실체클래스를 정의할때 추상클래스를 상속해서 만들 수 있다
 * 
 * 	/추상클래스의 용도
 * -실체 클래스의 공통된 필드와 메소드의 이름을 통일할 목적
 * 	-> 실체 클래스를 설계하는 사람이 여러 사람일 경우
 * 		=> 새, 곤충, 물고기 를 각각 다른 개발자가 설계할때 
 * 		'소리내는메소드'에 대한 이름을 각기 다르게하여 문제가 될 수 있음
 * 		=> 동물이 가지는 공통된 특성을 규격처럼 만들어놓으면 문제 해결할 수 있음
 * 	-> 실체 클래스마다 필드와 메소드가 제각기 다른 이름을 가질수있다
 * 
 * -실체 클래스를 작성할때 시간을 절약
 * 	-> 실체 클래스는 추가적인 필드와 메소드만 선언하면 된다
 * 		=> 공통된부분은 물려받을 수있기때문에
 * 
 * 					Phone=> owner ,turnOn() //공통된특성을 가진 추상클래스
 * 								↑(상속)
 *  TelePhone=>autoAnswering() 			SmartPhone=>internetSearch()
 * 
 * -실체 클래스 설계 규격을 만들고자 할때
 * 	-> 실체 클래스가 가져야할 필드와 메소드를 추상 클래스에 미리 정의해놓고
 * 	-> 실체 클래스는 추상 클래스를 무조건 상속받아 작성토록 한다.
 * 
 * 
 * ex. 
 * 			타이어 규격 (추상클래스)
 * 					↑(상속)
 * [실체클래스]한국타이어	[실체]금호타이어
 * 
 * 
 * 	/추상 클래스 선언
 * 
 * public abstract class 클래스 {	=> 추상클래스직접적으로 객체를 생성할 수 없다
 * 	//필드
 * 	//생성자
 * 	//메소드
 * }
 * 
 * ※추상클래스는 객체로 생성될수는 있다
 * -> 직접적으로 new연산자로는 객체 생성 불가!!
 * -> 하지만 상속하여 자식클래스 통해서는 객체 생성될 수있음!!
 * 
 * 
 * ----------------------------------------------------------------
 * 	/추상메소드와 오버라이딩
 * - 메소드 이름은 동일하나, 실행 내용이 실체 클래스마다 다른 메소드가 있을 수 있다
 * 	-> 필요한공통부분의 메소드라서 있긴있는데 메소드내에 구체적인 실행 내용을 가지지 않음
 * 	-> 자식클래스에서 즉, 실체 클래스에서 실행내용이 결정된다.
 * - 예: 동물은 소리를 낸다. 하지만 실체 동물들의 소리는 제각기 다르다
 * - 구현 방법
 * 	-> 추상 클래스에는 메소드의 선언부만 작성한다. 실행블록은 생략한다.
 * 		=>(추상메소드에서만 작성가능)
 * 	-> 추상메소드있다면 반드시 실체 클래스에서 메소드의 실행 내용을 작성한다. (오버라이딩)
 * 
 * 			Animal => abstract sound(); //소리 낸다 : 아직모름
 * 								↑(상속)
 * Dog=> sound(){} 소리낸다:멍멍 			Cat=>sound(){} 소리낸다:야옹
 * 
 * 
 * 
 * 
 * 
 * 
 */
}
